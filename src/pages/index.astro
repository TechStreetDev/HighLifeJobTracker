---
import App from "../App.astro";
import getUser from "../api/User";

const userData = await getUser(Astro.cookies.get("access_token").value)
if (!userData.exists) {
	return Astro.redirect("/login/")
}

const selected = Astro.url.searchParams.get("j")
let initialRank = 0
function secondsToHms(d) {
    d = Number(d);
    var h = Math.floor(d / 3600);
    var m = Math.floor(d % 3600 / 60);
    var s = Math.floor(d % 3600 % 60);

    var hDisplay = h > 0 ? h + (h == 1 ? "h, " : "h, ") : "";
    var mDisplay = m > 0 ? m + (m == 1 ? "m" : "m") : "0m";
    return hDisplay + mDisplay;
}

---

<App articleMode useHeader>
	<div class="m-6 mr-16 ml-16 grid lg:grid-cols-3 unhighlightable">
		<div class="text-center lg:text-left mt-12 lg:ml-6">
			<p class="text-sm text-zinc-300">The Unofficial</p>
			<p class="text-4xl font-semibold">HighLife Job Tracker</p>
			<p class="text-sm text-zinc-400 mt-3">A job activity tracker to parse data from live clock in channels and provide with a interactive dashboard for the data, maintained by techstreet.</p>
			<select onchange="resetSelected()" id="selected-job" class="w-52 mt-2 py-1 px-3 text-sm border rounded-lg bg-zinc-700 border-zinc-600 placeholder-zinc-400 text-zinc-200 border-transparent focus:border-transparent focus:ring-0">
				{userData.permissions.map(perm => {
					if (selected == perm) {
						return <option selected value={perm}>{perm}</option>
					} else {
						return <option value={perm}>{perm}</option>
					}
				})}
			</select>
		</div>
	</div>

	<div id="main" data-emp="0" class="m-6 mt-0 mr-16 ml-16 unhighlightable">
		{userData.jobs.map(job => {
			return (
				<div id={job.name} class="hidden">
					<div class="mt-12 grid lg:grid-cols-4 gap-3">
						<div id={`${job.name}-create-modal`} tabindex="-1" aria-hidden="true" class="fixed top-0 left-0 right-0 z-50 hidden w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full">
							<div class="relative w-full max-w-md max-h-full">
								<div class="relative rounded-lg shadow bg-zinc-700">
									<button type="button" class="absolute top-3 right-2.5 bg-transparent rounded-lg text-sm w-8 h-8 ml-auto inline-flex justify-center items-center hover:bg-zinc-600 hover:text-white" data-modal-hide={`${job.name}-create-modal`}>
										<svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
											<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
										</svg>
										<span class="sr-only">Close modal</span>
									</button>
									<div class="px-6 py-6 lg:px-8">
										<p class="mb-4 text-xl font-medium text-zinc-300">Create {job.name} Employee</p>
										<p class="font-bold text-xs mb-2 text-zinc-400 uppercase">Steam ID</p>
										<textarea id={`${job.name}-create-steam`} rows="1" style="overflow:auto; resize: none;" class="mb-2 block p-2.5 w-full text-xs rounded-lg bg-zinc-600 border-zinc-600 placeholder-gray-400 text-zinc-300"></textarea>

										<p class="font-bold text-xs mb-2 text-zinc-400 uppercase">Name</p>
										<textarea id={`${job.name}-create-name`} rows="1" style="overflow:auto; resize: none;" class="mb-2 block p-2.5 w-full text-xs rounded-lg bg-zinc-600 border-zinc-600 placeholder-gray-400 text-zinc-300"></textarea>

										<p class="font-bold text-xs mb-2 text-zinc-400 uppercase">Discord ID</p>
										<textarea id={`${job.name}-create-discord`} rows="1" style="overflow:auto; resize: none;" class="mb-2 block p-2.5 w-full text-xs rounded-lg bg-zinc-600 border-zinc-600 placeholder-gray-400 text-zinc-300"></textarea>

										<div class="grid grid-cols-2 gap-3">
											<div>
												<p class="font-bold text-xs mb-2 text-zinc-400 uppercase">Callsign</p>
												<textarea id={`${job.name}-create-callsign`} rows="1" style="overflow:auto; resize: none;" class="mb-2 h-10 block p-2.5 w-full text-xs rounded-lg bg-zinc-600 border-zinc-600 placeholder-gray-400 text-zinc-300"></textarea>
											</div>

											<div>
												<p class="font-bold text-xs mb-2 text-zinc-400 uppercase">Rank</p>
												<select id={`${job.name}-create-rank`} class="border text-sm rounded-lg focus:ring-0 focus:border-zinc-600 h-10 w-full block p-2.5 py-2 bg-zinc-600 border-zinc-600 placeholder-zinc-400 text-zinc-300 focus:ring-blue-500 focus:border-blue-500">
													{job.ranks.map(rank => {
														return <option value={job.ranks.indexOf(rank)}>{rank}</option>
													})}
												</select>
											</div>
										</div>

										<div class="error" id={`${job.name}-create-error`}></div>
										<button id={`${job.name}-create`} onclick={`createEmployee("${job.name}")`} class="mt-3 w-full text-white focus:ring-0 font-medium rounded-lg text-sm px-5 py-2.5 text-center bg-blue-600 hover:bg-blue-700 transition-colors">Create Employee</button>
									</div>
								</div>
							</div>
						</div>

						<div id={`${job.name}-employ`} class="h-min bg-zinc-800 rounded-lg px-4 py-3 grid gap-1">
							<span id="ignore"><p class="mt-1.5 mb-0.5 uppercase text-xs text-zinc-400 font-bold">Colour Information</p></span>
							<div id="ignore" class="grid text-xs mb-2">
								<p class="text-red-500">Last clocked in more than 56 days ago</p>
								<p class="text-orange-500">Last clocked in more than 42 days ago</p>
								<p class="text-yellow-500">Last clocked in more than 28 days ago</p>
							</div>

							{job.employees.map(employee => {
								var current = "2000-01-01T12:00"
								let flagged = 0

								if (employee.sessions != undefined) {
									current = employee.sessions[0].date

									employee.sessions.map(session => {
										var old = new Date(session.date)
										var today = new Date();

										if (session.length < 1800 && session.length > 4 && Math.floor((today - old) / 1000 / 60 / 60 / 24) < 30) {
											flagged += 1
										}
									})
								}

								var old = new Date(current)
								var today = new Date();
								var title = false

								if (initialRank != employee.rank) {
									title = true
									initialRank = employee.rank
								}

								return (
									<span id="ignore">{title ? <p class="mt-1.5 mb-0.5 uppercase text-xs text-zinc-400 font-bold">{job.ranks[employee.rank - 1]}</p> : ""}</span>
									<button data-days={Math.floor((today - old) / 1000 / 60 / 60 / 24)} onclick={`updateEmp(${job.employees.indexOf(employee)})`} class="hidden">
										{employee.name} ({employee.callsign}) {flagged >= 1 ? <!--<a class="absolute bottom-1 right-1 rounded-full bg-red-500 w-5 h-5"><p class="text-center">{flagged}</p></a>--> : ""}
										{employee.discord == "0" ? <i class="absolute bottom-3.5 right-1 fa-xl fa-solid fa-triangle-exclamation text-red-500"></i> : ""}
									</button>
								)
							})}

							<button id="ignore" data-modal-target={`${job.name}-create-modal`} data-modal-toggle={`${job.name}-create-modal`} type="button" class="mt-3 px-3 py-1 text-xs text-zinc-300 rounded bg-zinc-700 border transition-colors border-zinc-800 hover:border-yellow-300">Create Employee</button>
						</div>
						<div id={`${job.name}-employ-d`} class="bg-zinc-800 rounded-lg lg:col-span-3 px-4 py-3">
							{job.employees.map(employee => {
								let total = 0
								let timeMap = {};
								var current = "2000-01-01T12:00"
								if (employee.sessions != undefined) {
									current = employee.sessions[0].date
								}

								var old = new Date(current)
								var today = new Date();

								if (employee.sessions != null) {
									employee.sessions.map(session => {
										total += session.length
										if (Object.keys(timeMap).length < 12) {
											if (timeMap[session.month]) {
												timeMap[session.month] = timeMap[session.month] + session.length
											} else {
												timeMap[session.month] = session.length
											}
										}
									})
								}

								return (
									<div>
										{employee.discord == "0" ? <div class="border bg-red-900 mb-4 m-2 px-2 py-2 border-red-500 rounded-lg"><i class="fa-xl fa-solid fa-triangle-exclamation text-red-500"></i> This user has an incomplete profile and is missing a discord id</div> : ""}

										<p class="text-2xl font-semibold text-zinc-200 ml-2 mt-2">{employee.name}</p>
										<p class="text-sm text-zinc-400 ml-2">{employee.steam}</p>
										<p class="text-sm text-zinc-400 ml-2">discord:{employee.discord}</p>

										<button data-modal-target={`${job.name}-${employee.steam}-edit-modal`} data-modal-toggle={`${job.name}-${employee.steam}-edit-modal`} type="button" class="mt-1 ml-2 px-3 py-1 text-xs text-zinc-300 rounded bg-zinc-700 border transition-colors border-zinc-800 hover:border-yellow-300">Edit</button>
										<button data-modal-target={`${job.name}-${employee.steam}-delete-modal`} data-modal-toggle={`${job.name}-${employee.steam}-delete-modal`} type="button" class="mt-1 px-3 py-1 text-xs text-zinc-300 rounded bg-zinc-700 border transition-colors border-zinc-800 hover:border-yellow-300">Delete</button>

										<div id={`${job.name}-${employee.steam}-edit-modal`} tabindex="-1" aria-hidden="true" class="fixed top-0 left-0 right-0 z-50 hidden w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full">
											<div class="relative w-full max-w-md max-h-full">
												<div class="relative rounded-lg shadow bg-zinc-700">
													<button type="button" class="absolute top-3 right-2.5 bg-transparent rounded-lg text-sm w-8 h-8 ml-auto inline-flex justify-center items-center hover:bg-zinc-600 hover:text-white" data-modal-hide={`${job.name}-${employee.steam}-edit-modal`}>
														<svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
															<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
														</svg>
														<span class="sr-only">Close modal</span>
													</button>
													<div class="px-6 py-6 lg:px-8">
														<p class="mb-4 text-xl font-medium text-zinc-300">Edit {employee.name}</p>
														<p class="font-bold text-xs mb-2 text-zinc-400 uppercase">Name</p>
														<textarea id={`${job.name}-${employee.steam}-name`} rows="1" style="overflow:auto; resize: none;" class="mb-2 block p-2.5 w-full text-xs rounded-lg bg-zinc-600 border-zinc-600 placeholder-gray-400 text-zinc-300">{employee.name}</textarea>

														<p class="font-bold text-xs mb-2 text-zinc-400 uppercase">Discord ID</p>
														<textarea id={`${job.name}-${employee.steam}-discord`} rows="1" style="overflow:auto; resize: none;" class="mb-2 block p-2.5 w-full text-xs rounded-lg bg-zinc-600 border-zinc-600 placeholder-gray-400 text-zinc-300">{employee.discord}</textarea>

														<div class="grid grid-cols-2 gap-3">
															<div>
																<p class="font-bold text-xs mb-2 text-zinc-400 uppercase">Callsign</p>
																<textarea id={`${job.name}-${employee.steam}-callsign`} rows="1" style="overflow:auto; resize: none;" class="mb-2 h-10 block p-2.5 w-full text-xs rounded-lg bg-zinc-600 border-zinc-600 placeholder-gray-400 text-zinc-300">{employee.callsign}</textarea>
															</div>

															<div>
																<p class="font-bold text-xs mb-2 text-zinc-400 uppercase">Rank</p>
																<select id={`${job.name}-${employee.steam}-rank`} class="border text-sm rounded-lg focus:ring-0 focus:border-zinc-600 h-10 w-full block p-2.5 py-2 bg-zinc-600 border-zinc-600 placeholder-zinc-400 text-zinc-300 focus:ring-blue-500 focus:border-blue-500">
																	{job.ranks.map(rank => {
																		if (job.ranks.indexOf(rank) == (employee.rank - 1)) {
																			return <option selected value={job.ranks.indexOf(rank)}>{rank}</option>
																		} else {
																			return <option value={job.ranks.indexOf(rank)}>{rank}</option>
																		}
																	})}
																</select>
															</div>
														</div>

														<div class="error" id={`${job.name}-${employee.steam}-error`}></div>
														<button id={`${job.name}-${employee.steam}`} onclick={`editEmployee("${job.name}", "${employee.steam}")`} class="mt-3 w-full text-white focus:ring-0 font-medium rounded-lg text-sm px-5 py-2.5 text-center bg-blue-600 hover:bg-blue-700 transition-colors">Apply Changes</button>
													</div>
												</div>
											</div>
										</div>

										<div id={`${job.name}-${employee.steam}-delete-modal`} tabindex="-1" aria-hidden="true" class="fixed top-0 left-0 right-0 z-50 hidden w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full">
											<div class="relative w-full max-w-md max-h-full">
												<div class="relative rounded-lg shadow bg-zinc-700">
													<button type="button" class="absolute top-3 right-2.5 bg-transparent rounded-lg text-sm w-8 h-8 ml-auto inline-flex justify-center items-center hover:bg-zinc-600 hover:text-white" data-modal-hide={`${job.name}-${employee.steam}-delete-modal`}>
														<svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
															<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
														</svg>
														<span class="sr-only">Close modal</span>
													</button>
													<div class="px-6 py-6 lg:px-8">
														<p class="mb-4 text-xl font-medium text-zinc-300">Delete {employee.name}</p>

														<button id={`${job.name}-${employee.steam}-del`} onclick={`delEmployee("${job.name}", "${employee.steam}")`} class="w-full text-white focus:ring-0 font-medium rounded-lg text-sm px-5 py-2.5 text-center bg-blue-600 hover:bg-blue-700 transition-colors">Confirm Deletion</button>
													</div>
												</div>
											</div>
										</div>

										<div class="mx-auto text-center">
											<div class="m-2 mt-4 grid gap-3 lg:grid-cols-4">
												<div class="col-span-3">
													<div class="grid gap-3 lg:grid-cols-3">
														<div class="bg-zinc-700 rounded-lg">
															<h1 class="mt-6 text-2xl tracking-tight font-semibold text-zinc-300"><i class="fa-regular fa-xl fa-clock"></i></h1>
															<h1 class="mt-4 text-lg tracking-tight font-semibold text-zinc-300">Total Time</h1>
															<h1 class="mb-4 text-lg tracking-tight font-semibold text-[#439aa4]">{secondsToHms(total)}</h1>
														</div>

														<div class="bg-zinc-700 rounded-lg">
															<h1 class="mt-6 text-2xl tracking-tight font-semibold text-zinc-300"><i class="fa-solid fa-xl fa-hammer"></i></h1>
															<h1 class="mt-4 text-lg tracking-tight font-semibold text-zinc-300">Latest Shift</h1>
															<h1 class="mb-4 text-lg tracking-tight font-semibold text-[#439aa4]">{employee.sessions != undefined ? new Date(employee.sessions[0].date).toLocaleString("en-GB").slice(0, -3) : "None"}</h1>
														</div>

														<div class="bg-zinc-700 rounded-lg">
															<h1 class="mt-6 text-2xl tracking-tight font-semibold text-zinc-300"><i class="fa-solid fa-xl fa-eye"></i></h1>
															<h1 class="mt-4 text-lg tracking-tight font-semibold text-zinc-300">Last Seen</h1>
															<h1 class="mb-4 text-lg tracking-tight font-semibold text-[#439aa4]">{Math.floor((today - old) / 1000 / 60 / 60 / 24)} days ago</h1>
														</div>
													</div>

													<div class="mt-8 grid gap-3 lg:grid-cols-3">
														{Object.keys(timeMap).map(key => {
															const date = new Date(Number(key.split("-")[0]), Number(key.split("-")[1]) - 1, 1);  // 2009-11-10
															const month = date.toLocaleString('default', { month: 'long' });

															return (
																<div class="bg-zinc-700 rounded-lg">
																	<!--<h1 class="mt-6 text-2xl tracking-tight font-semibold text-zinc-300"><i class="fa-regular fa-xl fa-clock"></i></h1>-->
																	<h1 class="mt-4 text-lg tracking-tight font-semibold text-zinc-300">{month}, {Number(key.split("-")[0])}</h1>
																	<h1 class="mb-4 text-lg tracking-tight font-semibold text-[#439aa4]">{secondsToHms(timeMap[key])}</h1>
																</div>
															)
														})}
													</div>
												</div>

												<div class="bg-zinc-700 rounded-lg px-3 py-2">
													<p class="text-lg font-semibold text-zinc-200">Flagged Shifts</p>
													<p class="text-xs italic text-zinc-300 mb-3">Shifts will show here if they are less then 30 long and have been in the last 30 days.</p>
													<div>
														{employee.sessions != undefined ? employee.sessions.map(session => {
															var old = new Date(session.date)
															var today = new Date();

															if (session.length < 1800 && session.length > 4 && Math.floor((today - old) / 1000 / 60 / 60 / 24) < 30) {
																return (
																	<p class="text-sm mb-0.5 text-zinc-300">{new Date(session.date).toLocaleString("en-GB").slice(0, -3)} - {secondsToHms(session.length)}</p>
																)
															}
														}) : ""}
													</div>
												</div>
											</div>
										</div>
									</div>
								)
							})}
						</div>

						<div class="lg:col-span-4 grid lg:grid-cols-2 gap-3">
							<div>
								<div class="bg-zinc-800 rounded-lg px-4 py-3">
									<p class="text-2xl font-semibold text-zinc-200 ml-2 mt-2">Activity Overview</p>
									<p class="text-sm text-zinc-400 ml-2">Overview of all employees and their activity for this month.</p>
									<div class="grid grid-cols-4 gap-2 m-2 text-sm">
										<p class="text-red-500 text-center">Less than 1h</p>
										<p class="text-orange-500 text-center">More than 1h</p>
										<p class="text-yellow-500 text-center">More than 3h</p>
										<p class="text-green-500 text-center">More than 5h</p>
									</div>
									<div class="border-b border-zinc-700 m-2"></div>
									<div class="grid grid-cols-2 lg:grid-cols-3 gap-2 m-2 text-xs">
										{job.employees.map(employee => {
											let length = 0

											if (employee.sessions != undefined) {
												employee.sessions.map(session => {
													if (session.month == (new Date().toLocaleDateString("en-GB").split("/")[2] + "-" + new Date().toLocaleDateString("en-GB").split("/")[1])) {
														length += session.length
													}
												})
											}

											return (
												<div class={`text-left ${length >= 18000 ? "text-green-500" : (length >= 10800 ? "text-yellow-500" : (length >= 3600 ? "text-orange-500" : "text-red-500"))}`}>
													{employee.name}
												</div>
											)
										})}
									</div>
								</div>

								<div class="mt-3 bg-zinc-800 rounded-lg px-4 py-3">
									<p class="text-2xl font-semibold text-zinc-200 ml-2 mt-2">{job.name} Data Import</p>
									<p class="text-sm text-zinc-400 ml-2">Import clockin data, please only use this if you know how to.</p>
									<input type="file" class="rounded-lg bg-zinc-700 text-xs m-2 w-86 text-zinc-400 border border-zinc-600" name="inputfile" id="inputfile">
								</div>
							</div>

							<div>
								<div class="bg-zinc-800 rounded-lg px-4 py-3">
									<p class="text-2xl font-semibold text-zinc-200 ml-2 mt-2">Audit Log</p>
									<p class="text-sm text-zinc-400 ml-2">Admin actions, employee creation, deletion and editing logs.</p>
									<div class="m-2 grid grid-cols-1 gap-2">
										{job.audit != undefined ? job.audit.map(log => {
											return (
												<div class="text-xs text-zinc-300">
													<span class="text-zinc-400">{log.user}</span> <span class="text-zinc-500 italic">({new Date(Number(log.time * 1000)).toLocaleString("en-GB")})</span>
													<p>{log.msg}</p>
													{log.comments.map(comment => {
														if (comment != "" && comment != " ") {
															return <p class="ml-4"> - {comment}</p>
														}
													})}
												</div>
											)
										}) : ""}
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			)
		})}
	</div>
</App>

<script client::only>
	function updateSelected() {
		filter = document.getElementById("selected-job").value
		main = document.getElementById("main");
		children = main.children

		employees = document.getElementById(`${filter}-employ`);
		children2 = employees.children

		employees2 = document.getElementById(`${filter}-employ-d`);
		children3 = employees2.children

		for (var i = 0; i < children.length; i++) {
			var child = children[i];
			if (child.id.startsWith(filter)) {
				child.className = "mb-12 lg:ml-6 lg:mr-6"
			} else {
				child.className = "hidden"
			}
		}

		id = 0
		for (var i = 0; i < children2.length; i++) {
			var child = children2[i];
			if (!child.id.startsWith("ignore")) {
				days = Number(child.dataset.days)

				if (id == Number(main.dataset.emp)) {
					child.className = `bg-[#439aa4] text-[0.8rem] transition-colors px-3 py-1 rounded-lg text-zinc-100 text-left relative`
				} else {
					// 28 yellow
					// 42 orange
					// 56 red
					child.className = `${days >= 56 ? "text-red-500" : (days >= 42 ? "text-orange-500" : (days >= 28 ? "text-yellow-400" : "text-zinc-200"))} bg-zinc-700 hover:bg-zinc-600 text-[0.8rem] transition-colors px-3 py-1 rounded-lg text-left relative`
				}

				id += 1
			}
		}

		for (var i = 0; i < children3.length; i++) {
			var child = children3[i];
			if (i == Number(main.dataset.emp)) {
				child.className = "visible"
			} else {
				child.className = "hidden"
			}
		}

		main.scrollIntoView({behavior: 'smooth'})
	}

	function updateEmp(i) {
		main = document.getElementById("main");
		main.dataset.emp = String(i)
		updateSelected()
	}

	function resetSelected(i) {
		main = document.getElementById("main");
		location.replace("?j=" + document.getElementById("selected-job").value)
	}

	document.getElementById('inputfile').addEventListener('change', function () {
		let fr = new FileReader();
		fr.onload = function () {
			document.getElementById('output')
				filter = document.getElementById("selected-job").value
				fetch(`https://api.techstreet.tech/highlife/import/?token=${getCookie("access_token")}&job=${filter}`, {
					method: "POST",
					body: fr.result
				}).then(response => response.text())
					.then(res => {
						location.reload()
					})
		}

		fr.readAsText(this.files[0]);
	})


	function importData() {
		filter = document.getElementById("selected-job").value

		let header = new Headers();
		header.append('X-Token', getCookie("access_token"));
		header.append('X-Job', filter);

		fetch(`https://api.techstreet.tech/highlife/import/?token=${getCookie("access_token")}&job=${filter}`)
			.then(response => response.text())
			.then(res => {
				const out = JSON.parse(res)
				location.reload()
			})
	}

	function createEmployee(job) {
		error = document.getElementById(job + "-create-error")
		button = document.getElementById(job + "-create")
		steam = document.getElementById(job + "-create-steam").value.trim() 
		name = document.getElementById(job + "-create-name").value.trim() 
		callsign = document.getElementById(job + "-create-callsign").value.trim() 
		rank = document.getElementById(job + "-create-rank").value
		discord = document.getElementById(job + "-create-discord").value.trim() 

		if (discord == "" || discord == "0" || !(Number(discord))) {
			error.innerHTML = "Please use a valid discord id, a discord id must just be numbers"
			error.className = "text-red-500 text-xs"
			return
		}

		if (!steam.startsWith("steam:")) {
			error.innerHTML = "Please use a valid steam id, a steam id must start with 'steam:'"
			error.className = "text-red-500 text-xs"
			return
		}

		if (name == "") {
			error.innerHTML = "Please use a valid name"
			error.className = "text-red-500 text-xs"
			return
		}

		if (callsign == "") {
			error.innerHTML = "Please use a valid callsign"
			error.className = "text-red-500 text-xs"
			return
		}

		error.innerHTML = "hidden"
		error.className = "hidden"

		button.disabled = true
		button.innerHTML = "<i class=\"animate-spin fa-solid fa-spinner\"></i>"
        button.className = "mt-3 w-full text-white focus:ring-0 font-medium rounded-lg text-sm px-5 py-2.5 text-center bg-blue-700"

		fetch(`https://api.techstreet.tech/highlife/ediemployee/?token=${getCookie("access_token")}&steam=${encodeURIComponent(steam)}&name=${name}&callsign=${callsign}&rank=${rank}&job=${job}&discord=${discord}`)
			.then(response => response.text())
			.then(res => {
				location.reload()
			})
	}

	function editEmployee(job, steam) {
		error = document.getElementById(job + "-" + steam + "-error")
		button = document.getElementById(job + "-" + steam)
		name = document.getElementById(job + "-" + steam + "-name").value.trim() 
		callsign = document.getElementById(job + "-" + steam + "-callsign").value.trim() 
		rank = document.getElementById(job + "-" + steam + "-rank").value
		discord = document.getElementById(job + "-" + steam + "-discord").value.trim() 

		if (discord == "" || discord == "0" || !(Number(discord))) {
			error.innerHTML = "Please use a valid discord id, a discord id must just be numbers"
			error.className = "text-red-500 text-xs"
			return
		}

		if (name == "") {
			error.innerHTML = "Please use a valid name"
			error.className = "text-red-500 text-xs"
			return
		}

		if (callsign == "") {
			error.innerHTML = "Please use a valid callsign"
			error.className = "text-red-500 text-xs"
			return
		}

		error.innerHTML = "hidden"
		error.className = "hidden"

		button.disabled = true
		button.innerHTML = "<i class=\"animate-spin fa-solid fa-spinner\"></i>"
        button.className = "mt-3 w-full text-white focus:ring-0 font-medium rounded-lg text-sm px-5 py-2.5 text-center bg-blue-700"

		fetch(`https://api.techstreet.tech/highlife/ediemployee/?token=${getCookie("access_token")}&steam=${encodeURIComponent(steam)}&name=${name}&callsign=${callsign}&rank=${rank}&job=${job}&discord=${discord}`)
			.then(response => response.text())
			.then(res => {
				location.reload()
			})
	}

	function delEmployee(job, steam) {
		button = document.getElementById(job + "-" + steam + "-del")

		button.disabled = true
		button.innerHTML = "<i class=\"animate-spin fa-solid fa-spinner\"></i>"
        button.className = "mt-3 w-full text-white focus:ring-0 font-medium rounded-lg text-sm px-5 py-2.5 text-center bg-blue-700"

		fetch(`https://api.techstreet.tech/highlife/delemployee/?token=${getCookie("access_token")}&steam=${encodeURIComponent(steam)}&job=${job}`)
			.then(response => response.text())
			.then(res => {
				location.reload()
			})
	}

    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
    }

	updateSelected()
</script>
